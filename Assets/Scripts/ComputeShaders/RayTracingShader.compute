#pragma kernel CSMain

struct Ray
{
    float3 origin;
    float3 direction;
};

static const float4 w1 = float4(0.0f, 0.0f, 0.0f, 1.0f);
static const float PI = 3.14159265f;

RWTexture2D<float4> Result;
float4x4 CameraToWorld, CameraInverseProjection;

Texture2D<float4> Skybox;
SamplerState samplerSkybox;

Ray CreateRay(float3 origin, float3 direction)
{
    Ray ray;
    ray.origin = origin;
    ray.direction = direction;

    return ray;
}

Ray CreateCameraRay(float2 uv)
{
    float3 origin = mul(CameraToWorld, w1).xyz;
    float3 direction = mul(CameraInverseProjection, float4(uv, 0.0f, 1.0f)).xyz;

    direction = mul(CameraToWorld, float4(direction, 0.0f)).xyz;
    direction = normalize(direction);

    return CreateRay(origin, direction);
}

[numthreads(32,32,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    uint width, height;
    Result.GetDimensions(width, height);

    float2 uv = float2((id.xy + float2(0.5f, 0.5f)) / float2(width, height) * 2.0f - 1.0f);

    Ray ray = CreateCameraRay(uv);

    float phi = atan2(ray.direction.x, -ray.direction.z) / -PI * 0.5f;
    float theta = acos(ray.direction.y) / -PI;

    Result[id.xy] = Skybox.SampleLevel(samplerSkybox, float2(phi, theta), 0);
}
