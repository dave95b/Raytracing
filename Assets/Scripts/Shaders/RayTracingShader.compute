#pragma kernel CSMain

struct Ray
{
    float3 origin;
    float3 direction;
};

struct RayHit
{
    float3 position;
    float distance;
    float3 normal;
};

static const float4 w1 = float4(0.0f, 0.0f, 0.0f, 1.0f);
static const float3 float3Zero = float3(0.0f, 0.0f, 0.0f);
static const float PI = 3.14159265f;
static const float infinity = 3.402823466e+38;

RWTexture2D<float4> Result;
float4x4 CameraToWorld, CameraInverseProjection;
float2 PixelOffset;

Texture2D<float4> Skybox;
SamplerState samplerSkybox;

Ray CreateRay(float3 origin, float3 direction)
{
    Ray ray;
    ray.origin = origin;
    ray.direction = direction;

    return ray;
}

Ray CreateCameraRay(float2 uv)
{
    float3 origin = mul(CameraToWorld, w1).xyz;
    float3 direction = mul(CameraInverseProjection, float4(uv, 0.0f, 1.0f)).xyz;

    direction = mul(CameraToWorld, float4(direction, 0.0f)).xyz;
    direction = normalize(direction);

    return CreateRay(origin, direction);
}

RayHit CreateRayHit()
{
    RayHit hit;
    hit.position = float3Zero;
    hit.distance = infinity;
    hit.normal = float3Zero;

    return hit;
}

void IntersectGroundPlane(Ray ray, inout RayHit bestHit)
{
    float t = -ray.origin.y / ray.direction.y;

    if (t > 0 && t < bestHit.distance)
    {
        bestHit.distance = t;
        bestHit.position = ray.origin + t * ray.direction;
        bestHit.normal = float3(0.0f, 1.0f, 0.0f);
    }
}

void IntersectSphere(Ray ray, inout RayHit bestHit, float4 sphere)
{
    float3 d = ray.origin - sphere.xyz;
    float p1 = -dot(ray.direction, d);
    float p2sqr = p1 * p1 - dot(d, d) + sphere.w * sphere.w;

    if (p2sqr < 0)
        return;

    float p2 = sqrt(p2sqr);
    float t = p1 - p2 > 0 ? p1 - p2 : p1 + p2;

    if (t > 0 && t < bestHit.distance)
    {
        bestHit.distance = t;
        bestHit.position = ray.origin + t * ray.direction;
        bestHit.normal = normalize(bestHit.position - sphere.xyz);
    }
}

RayHit Trace(Ray ray)
{
    RayHit bestHit = CreateRayHit();
    IntersectGroundPlane(ray, bestHit);
    IntersectSphere(ray, bestHit, float4(0.0f, 3.0f, 0.0f, 1.0f));
    
    return bestHit;
}

float3 SampleSkybox(Ray ray)
{
    float phi = atan2(ray.direction.x, -ray.direction.z) / -PI * 0.5f;
    float theta = acos(ray.direction.y) / -PI;

    return Skybox.SampleLevel(samplerSkybox, float2(phi, theta), 0).xyz;
}

float3 Shade(inout Ray ray, RayHit hit)
{
    if (hit.distance < infinity)
        return hit.normal * 0.5f + 0.5f;
    else
        return SampleSkybox(ray);
}

[numthreads(32,32,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    uint width, height;
    Result.GetDimensions(width, height);

    float2 uv = float2((id.xy + PixelOffset) / float2(width, height) * 2.0f - 1.0f);
    Ray ray = CreateCameraRay(uv);
    RayHit hit = Trace(ray);

    Result[id.xy] = float4(Shade(ray, hit), 1.0f);
}
