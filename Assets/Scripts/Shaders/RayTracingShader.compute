#pragma kernel CSMain

struct Ray
{
    float3 origin;
    float3 direction;
    float3 energy;
};

struct RayHit
{
    float3 position;
    float distance;
    float3 normal;
    float3 albedo;
    float3 specular;
};

struct Sphere
{
    float3 position;
    float radius;
    float3 albedo;
    float3 specular;
};

struct DirectionalLight
{
    float3 direction;
    float4 color;
    float intensity;
};

static const float4 w1 = float4(0.0f, 0.0f, 0.0f, 1.0f);

static const float3 float3Zero = float3(0.0f, 0.0f, 0.0f);
static const float3 float3One = float3(1.0f, 1.0f, 1.0f);
static const float3 albedo = float3(0.8f, 0.8f, 0.8f);
static const float3 specular = float3(0.4f, 0.4f, 0.4f);

static const float PI = 3.14159265f;
static const float infinity = 3.402823466e+38;

RWTexture2D<float4> Result;
float2 TextureSize;

RWStructuredBuffer<Sphere> Spheres;
uint SphereCount;

float4x4 CameraToWorld, CameraInverseProjection;
float2 PixelOffset;
uint Bounces;

Texture2D<float4> Skybox;
SamplerState samplerSkybox;

RWStructuredBuffer<DirectionalLight> Light;
bool CastShadows;

float2 Pixel;
float Seed;

Ray CreateRay(float3 origin, float3 direction)
{
    Ray ray;
    ray.origin = origin;
    ray.direction = direction;
    ray.energy = float3One;

    return ray;
}

Ray CreateCameraRay(float2 uv)
{
    float3 origin = mul(CameraToWorld, w1).xyz;
    float3 direction = mul(CameraInverseProjection, float4(uv, 0.0f, 1.0f)).xyz;

    direction = mul(CameraToWorld, float4(direction, 0.0f)).xyz;
    direction = normalize(direction);

    return CreateRay(origin, direction);
}

RayHit CreateRayHit()
{
    RayHit hit;
    hit.position = float3Zero;
    hit.distance = infinity;
    hit.normal = float3Zero;
    hit.albedo = float3Zero;
    hit.specular = float3Zero;

    return hit;
}

float rand()
{
    float result = frac(sin(Seed / 100.0f * dot(Pixel, float2(12.9898f, 78.233f))) * 43758.5453f);
    Seed += 1.0f;

    return result;
}

float sdot(float3 x, float3 y, float f = 1.0f)
{
    return saturate(dot(x, y) * f);
}

float energy(float3 color)
{
    return dot(color, 1.0f / 3.0f);
}

float3x3 GetTangentSpace(float3 normal)
{
    float3 helper = abs(normal.x) > 0.99f ? float3(0, 0, 1) : float3(1, 0, 0);

    float3 tangent = normalize(cross(normal, helper));
    float3 binormal = normalize(cross(normal, tangent));

    return float3x3(tangent, binormal, normal);
}

float3 SampleHemisphere(float3 normal)
{
    float cosTheta = rand();
    float sinTheta = sqrt(max(0.0f, 1.0f - cosTheta * cosTheta));
    float phi = 2 * PI * rand();
    float3 tangentSpaceDir = float3(cos(phi) * sinTheta, sin(phi) * sinTheta, cosTheta);

    return mul(tangentSpaceDir, GetTangentSpace(normal));
}

void IntersectGroundPlane(Ray ray, inout RayHit bestHit)
{
    float t = -ray.origin.y / ray.direction.y;

    if (t > 0 && t < bestHit.distance)
    {
        bestHit.distance = t;
        bestHit.position = ray.origin + t * ray.direction;
        bestHit.normal = float3(0.0f, 1.0f, 0.0f);
        bestHit.albedo = albedo;
        bestHit.specular = specular;
    }
}

void IntersectSphere(Ray ray, inout RayHit bestHit, Sphere sphere)
{
    float3 d = ray.origin - sphere.position;
    float p1 = -dot(ray.direction, d);
    float p2sqr = p1 * p1 - dot(d, d) + sphere.radius * sphere.radius;

    if (p2sqr < 0)
        return;

    float p2 = sqrt(p2sqr);
    float t = p1 - p2 > 0 ? p1 - p2 : p1 + p2;

    if (t > 0 && t < bestHit.distance)
    {
        bestHit.distance = t;
        bestHit.position = ray.origin + t * ray.direction;
        bestHit.normal = normalize(bestHit.position - sphere.position);
        bestHit.albedo = sphere.albedo;
        bestHit.specular = sphere.specular;
    }
}

RayHit Trace(Ray ray)
{
    RayHit bestHit = CreateRayHit();
    IntersectGroundPlane(ray, bestHit);

    for (uint i = 0; i < SphereCount; i++)
        IntersectSphere(ray, bestHit, Spheres[i]);

    return bestHit;
}

float3 SampleSkybox(inout Ray ray)
{
    ray.energy = 0.0f;
    float phi = atan2(ray.direction.x, -ray.direction.z) / -PI * 0.5f;
    float theta = acos(ray.direction.y) / -PI;

    return Skybox.SampleLevel(samplerSkybox, float2(phi, theta), 0).xyz;
}

bool TestShadow(RayHit hit)
{
    if (!CastShadows)
        return false;

    Ray shadowRay = CreateRay(hit.position + hit.normal * 0.001f, -1.0f * Light[0].direction);
    RayHit shadowHit = Trace(shadowRay);

    return shadowHit.distance != infinity;
}

float3 ShadeSimple(inout Ray ray, RayHit hit)
{
    ray.origin = hit.position + hit.normal * 0.001f;
    ray.direction = reflect(ray.direction, hit.normal);
    ray.energy *= hit.specular;

    if (TestShadow(hit))
        return float3Zero;

    DirectionalLight light = Light[0];
    return hit.albedo * light.color.xyz * saturate(-dot(hit.normal, light.direction)) * light.intensity;
}

float3 ShadeDiffuse(inout Ray ray, RayHit hit)
{
    hit.albedo = min(1.0f - hit.specular, hit.albedo);

    float2 specDiff = float2(energy(hit.specular), energy(hit.albedo));
    specDiff /= (specDiff.x + specDiff.y);

    ray.origin = hit.position + hit.normal * 0.001f;
    float roulette = rand();

    if (roulette < specDiff.x)
    {
        ray.direction = reflect(ray.direction, hit.normal);
        ray.energy *= (1.0f / specDiff.x) * hit.specular * sdot(hit.normal, ray.direction);
    }
    else
    {
        ray.direction = SampleHemisphere(hit.normal);
        ray.energy *= (1.0f / specDiff.y) * 2 * hit.albedo * sdot(hit.normal, ray.direction);
    }

    return 0.0f;
}

float3 Shade(inout Ray ray, RayHit hit)
{
    if (hit.distance < infinity)
    {
        return ShadeDiffuse(ray, hit);
        //return ShadeSimple(ray, hit);
    }
    else
        return SampleSkybox(ray) * 1.5f;
}

[numthreads(32,32,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    Pixel = id.xy;
    float2 uv = float2((id.xy + PixelOffset) / TextureSize * 2.0f - 1.0f);
    Ray ray = CreateCameraRay(uv);

    float3 result = float3(0, 0, 0);

    for (uint i = 0; i <= Bounces; i++)
    {
        RayHit hit = Trace(ray);
        result += ray.energy * Shade(ray, hit);

        if (!any(ray.energy))
            break;
    }

    Result[id.xy] = float4(result, 1.0f);
}
